// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  clerkId   String   @unique
  githubId  String?  @unique // Storing GitHub ID to avoid duplicates
  name      String
  lastName  String
  email     String   @unique
  avatar    String? // GitHub profile picture URL
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id        String   @id @default(uuid())
  title     String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  batch    Batch[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Batch {
  id        String    @id @default(uuid())
  number    Int // Month number (1,2,3...)
  courseId  String
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  projects  Project[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Project {
  id                 String   @id @default(uuid())
  title              String
  description        String
  level              String // e.g., Beginner, Intermediate, Advanced
  status             String // e.g., "In Progress", "Completed", "Not Started"
  batchId            String
  batch              Batch    @relation(fields: [batchId], references: [id], onDelete: Cascade)
  learningObjectives Json     @db.JsonB // Store nested objectives as JSON changes
  steps              Json?     @db.JsonB // Stores all the steps but i is optional
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

// model LearningObjective {
//   id         String   @id @default(uuid())
//   projectId  String
//   project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
//   title      String
//   resources  Resource[]
//   steps      Step[]
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
// }

// model Resource {
//   id      String   @id @default(uuid())
//   type    String   // e.g., "Video", "Article", "Book"
//   title   String
//   url     String?  // Optional, might not exist for books
//   learningObjectiveId String
//   learningObjective LearningObjective @relation(fields: [learningObjectiveId], references: [id], onDelete: Cascade)
// }

// model Step {
//   id      String   @id @default(uuid())
//   content String   // The step description
//   order   Int      // Step order in learning objective
//   learningObjectiveId String
//   learningObjective LearningObjective @relation(fields: [learningObjectiveId], references: [id], onDelete: Cascade)
// }
